{"version":3,"sources":["components/Header/Header.tsx","lib/validation/invoice.ts","components/CustomTextField/CustomTextField.tsx","components/CardInfo/CardInfo.tsx","container/Blog.tsx","styles/theme/getMuiTheme.tsx","utils/ThemeWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","width","headerFont","breakpoints","down","fontSize","fontWeight","Header","title","styles","Grid","data-testid","className","container","direction","xs","item","Typography","component","variant","InvoiceSchema","object","shape","customerName","string","trim","required","min","invoiceNumber","businessName","taxIncluded","boolean","items","array","of","name","description","unitPrice","number","quantity","price","CustomTextField","id","label","field","meta","errors","touched","value","disabled","TextField","fullWidth","autoFocus","autoComplete","error","undefined","helperText","InputProps","inputProps","concat","marginTop","spacing","form","submit","margin","crossIcon","color","palette","main","paddingCard","padding","fieldMargin","paddingItem","paddingPriceItem","amountHeader","textAlign","amountText","CardInfo","useState","itemsArray","setItemsArray","initialValues","taxItem","setTaxItem","handleChangeOption","evt","target","toLowerCase","itemsArrayNew","renderAmountFields","values","taxAmount","totalAmount","netAmount","i","length","justify","alignItems","sm","enableReinitialize","validationSchema","onSubmit","actions","setSubmitting","console","log","alert","dirty","isSubmitting","Paper","elevation","Card","type","FormControl","FormLabel","RadioGroup","onChange","FormControlLabel","control","Radio","render","itemsVal","map","itemData","index","toString","onClick","newItems","splice","removeItem","alignContent","Button","md","Blog","maxWidth","customColors","hover","createMuiTheme","typography","htmlFontSize","fontFamily","fontWeightBold","fontWeightMedium","fontWeightRegular","fontWeightLight","h1","lineHeight","h2","h3","marginBottom","h4","button","textTransform","boxShadow","primary","secondary","overridesOptions","overrides","MuiInput","underline","borderBottom","divider","dark","ThemeWrapper","children","ThemeProvider","muiTheme","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.641bc17d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  headerFont: {\r\n    [theme.breakpoints.down('md')]: {\r\n      fontSize: '1.6rem',\r\n      fontWeight: 600,\r\n    },\r\n  },\r\n}));\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ title }) => {\r\n  const styles = useStyles();\r\n  return (\r\n    <Grid\r\n      data-testid=\"headerDiv\"\r\n      className={styles.root}\r\n      container\r\n      direction=\"row\"\r\n    >\r\n      <Grid xs={12} item>\r\n        <Typography component=\"h4\" variant=\"h4\" className={styles.headerFont}>\r\n          {title}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { string, object, array, number, boolean } from 'yup';\r\n\r\nexport const InvoiceSchema = object().shape({\r\n  customerName: string()\r\n    .trim('Invalid')\r\n    .required('Required')\r\n    .min(5, 'Minimum 5 characters!'),\r\n  invoiceNumber: string().required('Required'),\r\n  businessName: string().required('Required'),\r\n  taxIncluded: boolean().required('Required'),\r\n  items: array()\r\n    .of(\r\n      object().shape({\r\n        name: string().required('Required'),\r\n        description: string().required('Required'),\r\n        unitPrice: number().required('Required'),\r\n        quantity: number().required('Required'),\r\n        price: number(),\r\n      })\r\n    )\r\n    .required('Kindly select one'),\r\n});\r\n","import React from 'react';\r\nimport { FieldInputProps, FieldMetaProps } from 'formik';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Values } from '../../types/invoice/data';\r\n\r\ninterface TextFieldProps {\r\n  id: string;\r\n  label: string;\r\n  field: FieldInputProps<Values>;\r\n  meta: FieldMetaProps<Values>;\r\n  errors?: string;\r\n  touched?: boolean | undefined;\r\n  value?: string | number;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst CustomTextField: React.FC<TextFieldProps> = ({\r\n  id,\r\n  label,\r\n  field,\r\n  meta,\r\n  errors,\r\n  touched,\r\n  value,\r\n  disabled,\r\n}) => (\r\n  <TextField\r\n    {...field}\r\n    value={value || meta.value}\r\n    variant=\"filled\"\r\n    fullWidth\r\n    autoFocus={true}\r\n    id={id}\r\n    label={label}\r\n    autoComplete={id}\r\n    error={meta.touched && meta.error !== undefined}\r\n    helperText={errors && touched ? errors : null}\r\n    disabled={disabled}\r\n    InputProps={{\r\n      inputProps: {\r\n        'data-testid': id.concat('Field'),\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport default CustomTextField;\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  FormLabel,\r\n  FormControl,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Formik, Form, Field, FieldProps, FieldArray } from 'formik';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport { InvoiceSchema } from '../../lib/validation/invoice';\r\nimport { InvoiceObj, ItemsObj } from '../../types/invoice/data';\r\nimport CustomTextField from '../CustomTextField/CustomTextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  marginTop: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  crossIcon: {\r\n    color: theme.palette.error.main,\r\n  },\r\n  paddingCard: {\r\n    padding: theme.spacing(1, 0, 1, 1),\r\n  },\r\n  fieldMargin: {\r\n    margin: theme.spacing(1, 0),\r\n  },\r\n  paddingItem: {\r\n    padding: theme.spacing(0, 1, 0, 0),\r\n  },\r\n  paddingPriceItem: {\r\n    padding: theme.spacing(0, 1, 0, 0),\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: theme.spacing(1, 0),\r\n    },\r\n  },\r\n  amountHeader: {\r\n    textAlign: 'right',\r\n    padding: theme.spacing(0, 1, 0, 0),\r\n    [theme.breakpoints.down('sm')]: {\r\n      fontSize: '1.4rem',\r\n    },\r\n  },\r\n  amountText: {\r\n    textAlign: 'right',\r\n    padding: theme.spacing(0, 1, 0, 0),\r\n    [theme.breakpoints.down('sm')]: {\r\n      fontSize: '1.4rem',\r\n    },\r\n  },\r\n}));\r\n\r\nconst CardInfo: React.FC = () => {\r\n  const styles = useStyles();\r\n\r\n  const [itemsArray, setItemsArray] = useState<Array<ItemsObj>>([\r\n    {\r\n      name: '',\r\n      description: '',\r\n      unitPrice: 0,\r\n      quantity: 0,\r\n      price: 0,\r\n    },\r\n  ]);\r\n\r\n  const initialValues: InvoiceObj = {\r\n    customerName: '',\r\n    invoiceNumber: '',\r\n    businessName: '',\r\n    taxIncluded: false,\r\n    items: itemsArray,\r\n  };\r\n\r\n  const [taxItem, setTaxItem] = useState<boolean>(\r\n    initialValues ? initialValues.taxIncluded : false\r\n  );\r\n  const handleChangeOption = (\r\n    evt: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    if (evt.target.value && typeof evt.target.value === 'string') {\r\n      if (evt.target.value.toLowerCase() === 'true') setTaxItem(true);\r\n      if (evt.target.value.toLowerCase() === 'false') setTaxItem(false);\r\n    }\r\n  };\r\n  const itemsArrayNew: ItemsObj = {\r\n    name: '',\r\n    description: '',\r\n    unitPrice: 0,\r\n    quantity: 0,\r\n    price: 0,\r\n  };\r\n\r\n  const renderAmountFields = (values: InvoiceObj): JSX.Element => {\r\n    let totalAmount: number = 0;\r\n    let netAmount: number = 0;\r\n    let taxAmount: number = 0;\r\n    const taxPercentage: number = 10;\r\n\r\n    for (let i = 0; i < values.items.length; i++) {\r\n      netAmount += values.items[i].unitPrice * values.items[i].quantity;\r\n    }\r\n    taxAmount = (taxPercentage * netAmount) / 100;\r\n    if (taxItem) {\r\n      totalAmount = netAmount;\r\n    } else {\r\n      totalAmount = netAmount + taxAmount;\r\n    }\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"flex-end\"\r\n        alignItems=\"center\"\r\n        className={styles.marginTop}\r\n        data-testid=\"amountDiv\"\r\n      >\r\n        <Grid item xs={6} sm={9} data-testid=\"netAmountDiv\">\r\n          <Typography\r\n            component=\"h5\"\r\n            variant=\"h5\"\r\n            className={styles.amountHeader}\r\n          >\r\n            Net Amount\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3} data-testid=\"netAmountVal\">\r\n          <Typography component=\"h5\" variant=\"h5\" className={styles.amountText}>\r\n            {netAmount}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} sm={9}>\r\n          <Typography\r\n            component=\"h5\"\r\n            variant=\"h5\"\r\n            className={styles.amountHeader}\r\n            data-testid=\"taxAmountDiv\"\r\n          >\r\n            Tax Amount\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3} data-testid=\"taxAmountVal\">\r\n          <Typography component=\"h5\" variant=\"h5\" className={styles.amountText}>\r\n            {taxAmount}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} sm={9} data-testid=\"totalAmountDiv\">\r\n          <Typography\r\n            component=\"h5\"\r\n            variant=\"h5\"\r\n            className={styles.amountHeader}\r\n          >\r\n            Total Amount\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3} data-testid=\"totalAmountVal\">\r\n          <Typography component=\"h5\" variant=\"h5\" className={styles.amountText}>\r\n            {totalAmount}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid xs={12} direction=\"row\" container item data-testid=\"cardInfoDiv\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        enableReinitialize\r\n        validationSchema={InvoiceSchema}\r\n        onSubmit={(values, actions) => {\r\n          actions.setSubmitting(false);\r\n          console.log(values);\r\n          alert(`Invoice generated : ${values.invoiceNumber}`);\r\n        }}\r\n      >\r\n        {({ errors, touched, values, dirty, isSubmitting }) => {\r\n          const addMore = () => {\r\n            setItemsArray([...values.items, itemsArrayNew]);\r\n          };\r\n\r\n          const removeItem = (i: number): void => {\r\n            const newItems: ItemsObj[] = values.items.splice(i, 1);\r\n            setItemsArray(newItems);\r\n          };\r\n\r\n          return (\r\n            <Form className={styles.form}>\r\n              <Grid data-testid=\"cardDiv\" container direction=\"row\">\r\n                <Grid xs={12} data-testid=\"cardCol\" item>\r\n                  <Paper elevation={1}>\r\n                    <Card>\r\n                      <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        xs={12}\r\n                        item\r\n                        className={styles.paddingCard}\r\n                      >\r\n                        <Grid\r\n                          xs={12}\r\n                          item\r\n                          container\r\n                          alignItems=\"center\"\r\n                          spacing={1}\r\n                        >\r\n                          <Grid\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            className={styles.fieldMargin}\r\n                            data-testid=\"customerNameDiv\"\r\n                          >\r\n                            <Field name=\"customerName\" type=\"text\">\r\n                              {({ field, form, meta }: FieldProps) => (\r\n                                <CustomTextField\r\n                                  id=\"customerName\"\r\n                                  label=\"Customer Name *\"\r\n                                  field={field}\r\n                                  meta={meta}\r\n                                  errors={errors?.customerName}\r\n                                  touched={touched?.customerName}\r\n                                />\r\n                              )}\r\n                            </Field>\r\n                          </Grid>\r\n                          <Grid\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            className={styles.fieldMargin}\r\n                            data-testid=\"businessNameDiv\"\r\n                          >\r\n                            <Field name=\"businessName\" type=\"text\">\r\n                              {({ field, form, meta }: FieldProps) => (\r\n                                <CustomTextField\r\n                                  id=\"businessName\"\r\n                                  label=\"Business Name *\"\r\n                                  field={field}\r\n                                  meta={meta}\r\n                                  errors={errors?.businessName}\r\n                                  touched={touched?.businessName}\r\n                                />\r\n                              )}\r\n                            </Field>\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Grid\r\n                          xs={12}\r\n                          item\r\n                          container\r\n                          alignItems=\"center\"\r\n                          spacing={1}\r\n                        >\r\n                          <Grid\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            className={styles.fieldMargin}\r\n                            data-testid=\"invoiceNumberDiv\"\r\n                          >\r\n                            <Field name=\"invoiceNumber\" type=\"text\">\r\n                              {({ field, form, meta }: FieldProps) => (\r\n                                <CustomTextField\r\n                                  id=\"invoiceNumber\"\r\n                                  label=\"Invoice Name *\"\r\n                                  field={field}\r\n                                  meta={meta}\r\n                                  errors={errors?.invoiceNumber}\r\n                                  touched={touched?.invoiceNumber}\r\n                                />\r\n                              )}\r\n                            </Field>\r\n                          </Grid>\r\n                          <Grid\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            className={styles.fieldMargin}\r\n                            data-testid=\"taxIncludedDiv\"\r\n                          >\r\n                            <FormControl component=\"fieldset\">\r\n                              <FormLabel component=\"legend\">Tax</FormLabel>\r\n\r\n                              <Field component={RadioGroup} name=\"taxIncluded\">\r\n                                {({ field, form, meta }: FieldProps) => (\r\n                                  <RadioGroup\r\n                                    {...field}\r\n                                    value={taxItem}\r\n                                    onChange={handleChangeOption}\r\n                                    data-testid=\"taxIncludedField\"\r\n                                  >\r\n                                    <FormControlLabel\r\n                                      value={true}\r\n                                      control={<Radio />}\r\n                                      label=\"Inclusive\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                      value={false}\r\n                                      control={<Radio />}\r\n                                      label=\"Exclusive\"\r\n                                    />\r\n                                  </RadioGroup>\r\n                                )}\r\n                              </Field>\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        className={styles.paddingCard}\r\n                      >\r\n                        <Grid item xs={12} data-testid=\"itemsRow\">\r\n                          <FieldArray\r\n                            name=\"items\"\r\n                            render={() => {\r\n                              const itemsVal: ItemsObj[] = values.items;\r\n\r\n                              return (\r\n                                <Grid item xs={12} container direction=\"row\">\r\n                                  {itemsVal &&\r\n                                    itemsArray.length > 0 &&\r\n                                    itemsArray.map(\r\n                                      (itemData: ItemsObj, index: number) => (\r\n                                        <Grid\r\n                                          item\r\n                                          xs={12}\r\n                                          key={index.toString().concat('item')}\r\n                                          direction=\"row\"\r\n                                          container\r\n                                          className={styles.marginTop}\r\n                                        >\r\n                                          <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            sm={2}\r\n                                            className={styles.paddingItem}\r\n                                          >\r\n                                            <Field\r\n                                              name={`items.${index}.name`}\r\n                                              type=\"text\"\r\n                                              data-testid={index\r\n                                                .toString()\r\n                                                .concat('itemName')}\r\n                                            >\r\n                                              {({\r\n                                                field,\r\n                                                form,\r\n                                                meta,\r\n                                              }: FieldProps) => (\r\n                                                <CustomTextField\r\n                                                  id={index\r\n                                                    .toString()\r\n                                                    .concat('itemName')}\r\n                                                  label=\"Name *\"\r\n                                                  field={field}\r\n                                                  meta={meta}\r\n                                                  errors={meta.error}\r\n                                                  touched={meta.touched}\r\n                                                />\r\n                                              )}\r\n                                            </Field>\r\n                                          </Grid>\r\n                                          <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            sm={2}\r\n                                            className={styles.paddingItem}\r\n                                          >\r\n                                            <Field\r\n                                              name={`items.${index}.description`}\r\n                                              type=\"text\"\r\n                                              data-testid={index\r\n                                                .toString()\r\n                                                .concat('description')}\r\n                                            >\r\n                                              {({\r\n                                                field,\r\n                                                form,\r\n                                                meta,\r\n                                              }: FieldProps) => (\r\n                                                <CustomTextField\r\n                                                  id={index\r\n                                                    .toString()\r\n                                                    .concat('description')}\r\n                                                  label=\"Description *\"\r\n                                                  field={field}\r\n                                                  meta={meta}\r\n                                                  errors={meta.error}\r\n                                                  touched={meta.touched}\r\n                                                />\r\n                                              )}\r\n                                            </Field>\r\n                                          </Grid>\r\n                                          <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            sm={2}\r\n                                            className={styles.paddingItem}\r\n                                          >\r\n                                            <Field\r\n                                              name={`items.${index}.unitPrice`}\r\n                                              type=\"number\"\r\n                                              data-testid={index\r\n                                                .toString()\r\n                                                .concat('unitPrice')}\r\n                                            >\r\n                                              {({\r\n                                                field,\r\n                                                form,\r\n                                                meta,\r\n                                              }: FieldProps) => (\r\n                                                <CustomTextField\r\n                                                  id={index\r\n                                                    .toString()\r\n                                                    .concat('unitPrice')}\r\n                                                  label=\"Unit Price *\"\r\n                                                  field={field}\r\n                                                  meta={meta}\r\n                                                  errors={meta.error}\r\n                                                  touched={meta.touched}\r\n                                                />\r\n                                              )}\r\n                                            </Field>\r\n                                          </Grid>\r\n                                          <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            sm={2}\r\n                                            className={styles.paddingItem}\r\n                                          >\r\n                                            <Field\r\n                                              name={`items.${index}.quantity`}\r\n                                              type=\"number\"\r\n                                              data-testid={index\r\n                                                .toString()\r\n                                                .concat('quantity')}\r\n                                            >\r\n                                              {({\r\n                                                field,\r\n                                                form,\r\n                                                meta,\r\n                                              }: FieldProps) => (\r\n                                                <CustomTextField\r\n                                                  id={index\r\n                                                    .toString()\r\n                                                    .concat('quantity')}\r\n                                                  label=\"Quantity *\"\r\n                                                  field={field}\r\n                                                  meta={meta}\r\n                                                  errors={meta.error}\r\n                                                  touched={meta.touched}\r\n                                                />\r\n                                              )}\r\n                                            </Field>\r\n                                          </Grid>\r\n                                          <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            sm={2}\r\n                                            className={styles.paddingPriceItem}\r\n                                          >\r\n                                            <Field\r\n                                              name={`items.${index}.price`}\r\n                                              type=\"text\"\r\n                                              data-testid={index\r\n                                                .toString()\r\n                                                .concat('price')}\r\n                                            >\r\n                                              {({\r\n                                                field,\r\n                                                form,\r\n                                                meta,\r\n                                              }: FieldProps) => (\r\n                                                <CustomTextField\r\n                                                  id={index\r\n                                                    .toString()\r\n                                                    .concat('price')}\r\n                                                  label=\"Price *\"\r\n                                                  field={field}\r\n                                                  meta={meta}\r\n                                                  errors={meta.error}\r\n                                                  touched={meta.touched}\r\n                                                  disabled={true}\r\n                                                  value={\r\n                                                    values.items[index]\r\n                                                      ?.unitPrice *\r\n                                                    values.items[index]\r\n                                                      ?.quantity\r\n                                                  }\r\n                                                />\r\n                                              )}\r\n                                            </Field>\r\n                                          </Grid>\r\n                                          {values.items.length > 1 && (\r\n                                            <Grid\r\n                                              item\r\n                                              xs={3}\r\n                                              sm={1}\r\n                                              justify=\"center\"\r\n                                              alignItems=\"center\"\r\n                                              container\r\n                                            >\r\n                                              <CloseIcon\r\n                                                data-testid=\"closeButton\"\r\n                                                onClick={() =>\r\n                                                  removeItem(index)\r\n                                                }\r\n                                              />\r\n                                            </Grid>\r\n                                          )}\r\n                                        </Grid>\r\n                                      )\r\n                                    )}\r\n                                  <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"flex-start\"\r\n                                    alignContent=\"center\"\r\n                                    className={styles.marginTop}\r\n                                  >\r\n                                    <Grid item xs={12} sm={3}>\r\n                                      <Button\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => addMore()}\r\n                                        data-testid=\"addButton\"\r\n                                      >\r\n                                        Add Item{' '}\r\n                                        <AddCircleOutlineOutlinedIcon />\r\n                                      </Button>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                  {renderAmountFields(values)}\r\n                                </Grid>\r\n                              );\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"flex-end\"\r\n                alignItems=\"center\"\r\n                className={styles.marginTop}\r\n              >\r\n                <Grid xs={12} md={3} item>\r\n                  <Button\r\n                    data-testid=\"postFormSubmitButton\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    // disabled={isSubmitting || !dirty}\r\n                  >\r\n                    Generate Invoice\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","import React from 'react';\r\nimport { Grid, Container } from '@material-ui/core';\r\nimport Header from '../components/Header/Header';\r\nimport CardInfo from '../components/CardInfo/CardInfo';\r\n\r\nconst Blog: React.FC = (): JSX.Element => (\r\n  <Container data-testid=\"portalContainer\" maxWidth=\"lg\">\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      xs={12}\r\n      item\r\n    >\r\n      <Header title=\"Invoice\" />\r\n      <CardInfo />\r\n    </Grid>\r\n  </Container>\r\n);\r\nexport default Blog;\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport { Overrides as CoreOverrides } from '@material-ui/core/styles/overrides';\r\nimport { AlertClassKey, AutocompleteClassKey } from '@material-ui/lab';\r\nimport { CSSProperties } from '@material-ui/styles';\r\n\r\ninterface Overrides extends CoreOverrides {\r\n  MuiAlert?:\r\n    | Partial<Record<AlertClassKey, CSSProperties | (() => CSSProperties)>>\r\n    | undefined;\r\n  MuiAutoComplete?:\r\n    | Partial<\r\n        Record<AutocompleteClassKey, CSSProperties | (() => CSSProperties)>\r\n      >\r\n    | undefined;\r\n}\r\n\r\n// default font\r\nexport const fonts = {\r\n  main: 'Open Sans',\r\n  fixedWidth: 'Roboto Mono',\r\n};\r\n\r\nconst customColors = {\r\n  primary: {\r\n    main: '#4e4d52',\r\n    hover: '#7a7882',\r\n  },\r\n  secondary: {\r\n    main: '#300a3d',\r\n    hover: '#54116b',\r\n  },\r\n};\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    htmlFontSize: 10,\r\n    fontFamily: fonts.main,\r\n    fontWeightBold: 600,\r\n    fontWeightMedium: 500,\r\n    fontWeightRegular: 400,\r\n    fontWeightLight: 300,\r\n    h1: {\r\n      fontSize: '4.2rem',\r\n      fontWeight: 600,\r\n      lineHeight: '2.2rem',\r\n    },\r\n    h2: {\r\n      fontSize: '2.8rem',\r\n      fontWeight: 600,\r\n    },\r\n    h3: {\r\n      fontSize: '2rem',\r\n      fontWeight: 700,\r\n      marginBottom: '1.8rem',\r\n    },\r\n    h4: {\r\n      fontSize: '1.6rem',\r\n      fontWeight: 600,\r\n      marginBottom: '1.8rem',\r\n      color: customColors.primary.main,\r\n    },\r\n    button: {\r\n      fontSize: '1.4rem',\r\n      textTransform: 'none',\r\n      fontWeight: 600,\r\n      boxShadow: 'none',\r\n    },\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: customColors.primary.main,\r\n    },\r\n    secondary: {\r\n      main: customColors.secondary.main,\r\n    },\r\n  },\r\n});\r\n\r\nconst { palette } = theme;\r\nconst overridesOptions: { overrides: Overrides } = {\r\n  overrides: {\r\n    MuiInput: {\r\n      root: {\r\n        '& > .MuiInput Adornment-positionEnd': {\r\n          marginTop: '0.5rem',\r\n        },\r\n      },\r\n      underline: {\r\n        '&:before': {\r\n          borderBottom: `2px ${customColors.primary.hover} ${palette.divider}`,\r\n        },\r\n        '&:after': {\r\n          borderBottom: `2px ${customColors.secondary.hover} ${palette.primary.dark}`,\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\ntheme.overrides = overridesOptions.overrides;\r\nexport default theme;\r\n","import React, { ReactNode } from 'react';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport muiTheme from '../styles/theme/getMuiTheme';\r\n\r\nexport interface ThemeWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst ThemeWrapper = ({ children }: ThemeWrapperProps) => (\r\n  <ThemeProvider theme={muiTheme}>{children}</ThemeProvider>\r\n);\r\n\r\nexport default ThemeWrapper;\r\n","import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport Blog from './container/Blog';\nimport ThemeWrapper from './utils/ThemeWrapper';\n\nfunction App() {\n  return (\n    <ThemeWrapper>\n      <Container title=\"mainDiv\" data-testid=\"mainDiv\">\n        <Blog />\n      </Container>\n    </ThemeWrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}